<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/BankAccountService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/BankAccountService.java" />
              <option name="originalContent" value="import java.io.*;&#10;import java.nio.file.*;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeParseException;&#10;import java.util.*;&#10;&#10;public class BankAccountService {&#10;    private static final String FILE_PATH = &quot;data/bank_accounts.csv&quot;;&#10;    private final Scanner sc;&#10;&#10;    public BankAccountService(Scanner sc) {&#10;        this.sc = sc;&#10;    }&#10;&#10;    // ================= THÊM MỚI TÀI KHOẢN =================&#10;    public void addBankAccount() {&#10;        try {&#10;            List&lt;String&gt; lines = readAllLines();&#10;            int newId = getNextId(lines);&#10;&#10;            System.out.println(&quot;\n=== THÊM MỚI TÀI KHOẢN NGÂN HÀNG ===&quot;);&#10;&#10;            String code = readRequiredString(&quot;Nhập mã tài khoản: &quot;);&#10;            String owner = readRequiredString(&quot;Nhập tên chủ tài khoản: &quot;);&#10;            String createDate = readDate(&quot;Nhập ngày tạo tài khoản (yyyy-MM-dd): &quot;);&#10;            int type = readAccountType();&#10;&#10;            StringBuilder sb = new StringBuilder();&#10;            sb.append(newId).append(&quot;,&quot;).append(code).append(&quot;,&quot;).append(owner).append(&quot;,&quot;).append(createDate);&#10;&#10;            if (type == 1) { // Tiết kiệm&#10;                double amount = readPositiveDouble(&quot;Nhập số tiền gửi tiết kiệm: &quot;);&#10;                String depositDate = readDate(&quot;Nhập ngày gửi tiết kiệm (yyyy-MM-dd): &quot;);&#10;                double interest = readPositiveDouble(&quot;Nhập lãi suất (%): &quot;);&#10;                int term = readPositiveInt(&quot;Nhập kỳ hạn (số tháng): &quot;);&#10;&#10;                sb.append(&quot;,&quot;).append(amount)&#10;                        .append(&quot;,&quot;).append(depositDate)&#10;                        .append(&quot;,&quot;).append(interest)&#10;                        .append(&quot;,&quot;).append(term);&#10;            } else { // Thanh toán&#10;                String cardNumber = readRequiredString(&quot;Nhập số thẻ: &quot;);&#10;                double balance = readPositiveDouble(&quot;Nhập số tiền trong tài khoản: &quot;);&#10;&#10;                sb.append(&quot;,&quot;).append(cardNumber)&#10;                        .append(&quot;,&quot;).append(balance);&#10;            }&#10;&#10;            appendLine(sb.toString());&#10;            System.out.println(&quot;Thêm tài khoản thành công!&quot;);&#10;        } catch (IOException e) {&#10;            System.out.println(&quot;Lỗi khi đọc/ghi file: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    // ================= HÀM HỖ TRỢ =================&#10;    private List&lt;String&gt; readAllLines() throws IOException {&#10;        File file = new File(FILE_PATH);&#10;        if (!file.exists()) {&#10;            boolean dirCreated = file.getParentFile().mkdirs();&#10;            if (!dirCreated &amp;&amp; !file.getParentFile().exists()) {&#10;                throw new IOException(&quot;Không thể tạo thư mục dữ liệu: &quot; + file.getParent());&#10;            }&#10;            boolean fileCreated = file.createNewFile();&#10;            if (!fileCreated &amp;&amp; !file.exists()) {&#10;                throw new IOException(&quot;Không thể tạo file dữ liệu: &quot; + FILE_PATH);&#10;            }&#10;        }&#10;        return new ArrayList&lt;&gt;(Files.readAllLines(Paths.get(FILE_PATH)));&#10;    }&#10;&#10;    private int getNextId(List&lt;String&gt; lines) {&#10;        if (lines.isEmpty()) return 1;&#10;        String lastLine = lines.get(lines.size() - 1);&#10;        String[] parts = lastLine.split(&quot;,&quot;);&#10;        try {&#10;            return Integer.parseInt(parts[0]) + 1;&#10;        } catch (NumberFormatException e) {&#10;            return 1;&#10;        }&#10;    }&#10;&#10;    private void appendLine(String line) throws IOException {&#10;        try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILE_PATH, true))) {&#10;            bw.write(line);&#10;            bw.newLine();&#10;        }&#10;    }&#10;&#10;    // ================= HÀM ĐỌC VÀ VALIDATE DỮ LIỆU =================&#10;    private String readRequiredString(String prompt) {&#10;        while (true) {&#10;            System.out.print(prompt);&#10;            String input = sc.nextLine().trim();&#10;            if (!input.isEmpty()) return input;&#10;            System.out.println(&quot;Trường này không được bỏ trống!&quot;);&#10;        }&#10;    }&#10;&#10;    private double readPositiveDouble(String prompt) {&#10;        while (true) {&#10;            System.out.print(prompt);&#10;            try {&#10;                double value = Double.parseDouble(sc.nextLine());&#10;                if (value &gt; 0) return value;&#10;                System.out.println(&quot;Giá trị phải là số dương!&quot;);&#10;            } catch (NumberFormatException e) {&#10;                System.out.println(&quot;Giá trị không hợp lệ, nhập số!&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private int readPositiveInt(String prompt) {&#10;        while (true) {&#10;            System.out.print(prompt);&#10;            try {&#10;                int value = Integer.parseInt(sc.nextLine());&#10;                if (value &gt; 0) return value;&#10;                System.out.println(&quot;Giá trị phải là số nguyên dương!&quot;);&#10;            } catch (NumberFormatException e) {&#10;                System.out.println(&quot;Giá trị không hợp lệ, nhập số nguyên!&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private String readDate(String prompt) {&#10;        while (true) {&#10;            System.out.print(prompt);&#10;            String input = sc.nextLine().trim();&#10;            try {&#10;                LocalDate.parse(input);&#10;                return input;&#10;            } catch (DateTimeParseException e) {&#10;                System.out.println(&quot;Định dạng ngày không hợp lệ! Vui lòng nhập yyyy-MM-dd.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private int readAccountType() {&#10;        while (true) {&#10;            System.out.print(&quot;Chọn loại tài khoản (1. Tiết kiệm, 2. Thanh toán): &quot;);&#10;            String input = sc.nextLine().trim();&#10;            if (input.equals(&quot;1&quot;) || input.equals(&quot;2&quot;)) return Integer.parseInt(input);&#10;            System.out.println(&quot;Loại tài khoản không hợp lệ, nhập 1 hoặc 2.&quot;);&#10;        }&#10;    }&#10;&#10;    public void deleteAccount() {&#10;        System.out.println(&quot;Chức năng xóa tài khoản chưa được triển khai.&quot;);&#10;    }&#10;&#10;    public void displayAccounts() {&#10;        System.out.println(&quot;Chức năng hiển thị danh sách tài khoản chưa được triển khai.&quot;);&#10;    }&#10;&#10;    public void searchAccount() {&#10;        System.out.println(&quot;Chức năng tìm kiếm tài khoản chưa được triển khai.&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import java.io.*;&#10;import java.nio.file.*;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeParseException;&#10;import java.util.*;&#10;&#10;public class BankAccountService {&#10;    private static final String FILE_PATH = &quot;data/bank_accounts.csv&quot;;&#10;    private final Scanner sc;&#10;&#10;    public BankAccountService(Scanner sc) {&#10;        this.sc = sc;&#10;    }&#10;&#10;    // ================= THÊM MỚI TÀI KHOẢN =================&#10;    public void addBankAccount() {&#10;        try {&#10;            List&lt;String&gt; lines = readAllLines();&#10;            int newId = getNextId(lines);&#10;&#10;            System.out.println(&quot;\n=== THÊM MỚI TÀI KHOẢN NGÂN HÀNG ===&quot;);&#10;&#10;            String code = readRequiredString(&quot;Nhập mã tài khoản: &quot;);&#10;            String owner = readRequiredString(&quot;Nhập tên chủ tài khoản: &quot;);&#10;            String createDate = readDate(&quot;Nhập ngày tạo tài khoản (yyyy-MM-dd): &quot;);&#10;            int type = readAccountType();&#10;&#10;            StringBuilder sb = new StringBuilder();&#10;            sb.append(newId).append(&quot;,&quot;).append(code).append(&quot;,&quot;).append(owner).append(&quot;,&quot;).append(createDate);&#10;&#10;            if (type == 1) { // Tiết kiệm&#10;                double amount = readPositiveDouble(&quot;Nhập số tiền gửi tiết kiệm: &quot;);&#10;                String depositDate = readDate(&quot;Nhập ngày gửi tiết kiệm (yyyy-MM-dd): &quot;);&#10;                double interest = readPositiveDouble(&quot;Nhập lãi suất (%): &quot;);&#10;                int term = readPositiveInt(&quot;Nhập kỳ hạn (số tháng): &quot;);&#10;&#10;                sb.append(&quot;,&quot;).append(amount)&#10;                        .append(&quot;,&quot;).append(depositDate)&#10;                        .append(&quot;,&quot;).append(interest)&#10;                        .append(&quot;,&quot;).append(term);&#10;            } else { // Thanh toán&#10;                String cardNumber = readRequiredString(&quot;Nhập số thẻ: &quot;);&#10;                double balance = readPositiveDouble(&quot;Nhập số tiền trong tài khoản: &quot;);&#10;&#10;                sb.append(&quot;,&quot;).append(cardNumber)&#10;                        .append(&quot;,&quot;).append(balance);&#10;            }&#10;&#10;            appendLine(sb.toString());&#10;            System.out.println(&quot;Thêm tài khoản thành công!&quot;);&#10;        } catch (IOException e) {&#10;            System.out.println(&quot;Lỗi khi đọc/ghi file: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    // ================= HÀM HỖ TRỢ =================&#10;    private List&lt;String&gt; readAllLines() throws IOException {&#10;        File file = new File(FILE_PATH);&#10;        if (!file.exists()) {&#10;            boolean dirCreated = file.getParentFile().mkdirs();&#10;            if (!dirCreated &amp;&amp; !file.getParentFile().exists()) {&#10;                throw new IOException(&quot;Không thể tạo thư mục dữ liệu: &quot; + file.getParent());&#10;            }&#10;            boolean fileCreated = file.createNewFile();&#10;            if (!fileCreated &amp;&amp; !file.exists()) {&#10;                throw new IOException(&quot;Không thể tạo file dữ liệu: &quot; + FILE_PATH);&#10;            }&#10;        }&#10;        return new ArrayList&lt;&gt;(Files.readAllLines(Paths.get(FILE_PATH)));&#10;    }&#10;&#10;    private int getNextId(List&lt;String&gt; lines) {&#10;        if (lines.isEmpty()) return 1;&#10;        String lastLine = lines.get(lines.size() - 1);&#10;        String[] parts = lastLine.split(&quot;,&quot;);&#10;        try {&#10;            return Integer.parseInt(parts[0]) + 1;&#10;        } catch (NumberFormatException e) {&#10;            return 1;&#10;        }&#10;    }&#10;&#10;    private void appendLine(String line) throws IOException {&#10;        try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILE_PATH, true))) {&#10;            bw.write(line);&#10;            bw.newLine();&#10;        }&#10;    }&#10;&#10;    // ================= HÀM ĐỌC VÀ VALIDATE DỮ LIỆU =================&#10;    private String readRequiredString(String prompt) {&#10;        while (true) {&#10;            System.out.print(prompt);&#10;            String input = sc.nextLine().trim();&#10;            if (!input.isEmpty()) return input;&#10;            System.out.println(&quot;Trường này không được bỏ trống!&quot;);&#10;        }&#10;    }&#10;&#10;    private double readPositiveDouble(String prompt) {&#10;        while (true) {&#10;            System.out.print(prompt);&#10;            try {&#10;                double value = Double.parseDouble(sc.nextLine());&#10;                if (value &gt; 0) return value;&#10;                System.out.println(&quot;Giá trị phải là số dương!&quot;);&#10;            } catch (NumberFormatException e) {&#10;                System.out.println(&quot;Giá trị không hợp lệ, nhập số!&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private int readPositiveInt(String prompt) {&#10;        while (true) {&#10;            System.out.print(prompt);&#10;            try {&#10;                int value = Integer.parseInt(sc.nextLine());&#10;                if (value &gt; 0) return value;&#10;                System.out.println(&quot;Giá trị phải là số nguyên dương!&quot;);&#10;            } catch (NumberFormatException e) {&#10;                System.out.println(&quot;Giá trị không hợp lệ, nhập số nguyên!&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private String readDate(String prompt) {&#10;        while (true) {&#10;            System.out.print(prompt);&#10;            String input = sc.nextLine().trim();&#10;            try {&#10;                LocalDate.parse(input);&#10;                return input;&#10;            } catch (DateTimeParseException e) {&#10;                System.out.println(&quot;Định dạng ngày không hợp lệ! Vui lòng nhập yyyy-MM-dd.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private int readAccountType() {&#10;        while (true) {&#10;            System.out.print(&quot;Chọn loại tài khoản (1. Tiết kiệm, 2. Thanh toán): &quot;);&#10;            String input = sc.nextLine().trim();&#10;            if (input.equals(&quot;1&quot;) || input.equals(&quot;2&quot;)) return Integer.parseInt(input);&#10;            System.out.println(&quot;Loại tài khoản không hợp lệ, nhập 1 hoặc 2.&quot;);&#10;        }&#10;    }&#10;&#10;    private List&lt;BankAccount&gt; getAllAccounts() throws IOException {&#10;        List&lt;String&gt; lines = readAllLines();&#10;        List&lt;BankAccount&gt; accounts = new ArrayList&lt;&gt;();&#10;        for (String line : lines) {&#10;            String[] parts = line.split(&quot;,&quot;);&#10;            if (parts.length == 8) {&#10;                // SavingAccount&#10;                accounts.add(new SavingAccount(&#10;                    Integer.parseInt(parts[0]), parts[1], parts[2], parts[3],&#10;                    Double.parseDouble(parts[4]), parts[5], Double.parseDouble(parts[6]), Integer.parseInt(parts[7])&#10;                ));&#10;            } else if (parts.length == 6) {&#10;                // PaymentAccount&#10;                accounts.add(new PaymentAccount(&#10;                    Integer.parseInt(parts[0]), parts[1], parts[2], parts[3],&#10;                    parts[4], Double.parseDouble(parts[5])&#10;                ));&#10;            }&#10;        }&#10;        return accounts;&#10;    }&#10;&#10;    public void displayAccounts() {&#10;        try {&#10;            List&lt;BankAccount&gt; accounts = getAllAccounts();&#10;            if (accounts.isEmpty()) {&#10;                System.out.println(&quot;Không có tài khoản nào.&quot;);&#10;            } else {&#10;                System.out.println(&quot;\n--- DANH SÁCH TÀI KHOẢN ---&quot;);&#10;                for (BankAccount acc : accounts) {&#10;                    System.out.println(acc);&#10;                }&#10;            }&#10;        } catch (IOException e) {&#10;            System.out.println(&quot;Lỗi khi đọc file: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void searchAccount() {&#10;        System.out.print(&quot;Nhập từ khóa tìm kiếm (mã hoặc tên chủ): &quot;);&#10;        String keyword = sc.nextLine().trim().toLowerCase();&#10;        try {&#10;            List&lt;BankAccount&gt; accounts = getAllAccounts();&#10;            List&lt;BankAccount&gt; found = new ArrayList&lt;&gt;();&#10;            for (BankAccount acc : accounts) {&#10;                if (acc.getCode().toLowerCase().contains(keyword) || acc.getOwner().toLowerCase().contains(keyword)) {&#10;                    found.add(acc);&#10;                }&#10;            }&#10;            if (found.isEmpty()) {&#10;                System.out.println(&quot;Không tìm thấy tài khoản phù hợp.&quot;);&#10;            } else {&#10;                System.out.println(&quot;\n--- KẾT QUẢ TÌM KIẾM ---&quot;);&#10;                for (BankAccount acc : found) {&#10;                    System.out.println(acc);&#10;                }&#10;            }&#10;        } catch (IOException e) {&#10;            System.out.println(&quot;Lỗi khi đọc file: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void deleteAccount() {&#10;        while (true) {&#10;            System.out.print(&quot;Nhập mã tài khoản cần xóa: &quot;);&#10;            String code = sc.nextLine().trim();&#10;            try {&#10;                List&lt;BankAccount&gt; accounts = getAllAccounts();&#10;                BankAccount toDelete = null;&#10;                for (BankAccount acc : accounts) {&#10;                    if (acc.getCode().equals(code)) {&#10;                        toDelete = acc;&#10;                        break;&#10;                    }&#10;                }&#10;                if (toDelete == null) {&#10;                    throw new NotFoundBankAccountException(&quot;Tài khoản không tồn tại.&quot;);&#10;                }&#10;                System.out.print(&quot;Bạn có chắc muốn xóa tài khoản này? (Yes/No): &quot;);&#10;                String confirm = sc.nextLine().trim().toLowerCase();&#10;                if (confirm.equals(&quot;yes&quot;)) {&#10;                    accounts.remove(toDelete);&#10;                    // Save back to CSV&#10;                    try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILE_PATH))) {&#10;                        for (BankAccount acc : accounts) {&#10;                            bw.write(acc.toCSV());&#10;                            bw.newLine();&#10;                        }&#10;                    }&#10;                    System.out.println(&quot;Đã xóa tài khoản thành công!&quot;);&#10;                    displayAccounts();&#10;                    break;&#10;                } else if (confirm.equals(&quot;no&quot;)) {&#10;                    System.out.println(&quot;Hủy xóa. Quay về menu chính.&quot;);&#10;                    break;&#10;                } else {&#10;                    System.out.println(&quot;Vui lòng nhập Yes hoặc No.&quot;);&#10;                }&#10;            } catch (NotFoundBankAccountException e) {&#10;                System.out.println(e.getMessage());&#10;                System.out.println(&quot;Nhấn Enter để quay lại menu chính.&quot;);&#10;                sc.nextLine();&#10;                break;&#10;            } catch (IOException e) {&#10;                System.out.println(&quot;Lỗi khi xử lý file: &quot; + e.getMessage());&#10;                break;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>